events {
    worker_connections 1024;
}

http {
    ssl_session_tickets off;
    
    server {
        listen 443 ssl;

        #EDITAR: Endpoint do servidor o2b2-auth-server
        set $o2b2_auth_server_host "http://localhost:3000";

        #EDITAR: hostname/domínio público pelo qual o servidor será acesso nos endpoints sem mTLS
        server_name as.localhost;

        #EDITAR: caminho dos certiicados (chaves pública e privada) do hostname declarado acima
        ssl_certificate /etc/nginx/certs/as.localhost.crt;
        ssl_certificate_key /etc/nginx/certs/as.localhost.key;

        proxy_set_header Referer $http_referer;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Host $host;

        #Remover na versão final
        location / {
            root   /usr/share/nginx/html/;
            index  index.html;
        }

        #Endpoint de well-known
        location /.well-known/openid-configuration {
            proxy_pass $o2b2_auth_server_host;
            proxy_redirect off;
        }

        #Necessário apenas em caso de desenvolvimento onde não possui frontend da instituição
        location /interaction/ {
            proxy_pass $o2b2_auth_server_host;
            #proxy_redirect off;
        }

        #Redirect do cliente para a instituição detentora/transmissora
        location /auth {
            proxy_pass $o2b2_auth_server_host;
            #proxy_redirect off;
        }

        #Migrar pra um host interno
        location /session/ {
            proxy_pass $o2b2_auth_server_host;
            #proxy_redirect off;
        }
    }

    server {
        listen 443 ssl;

        #EDITAR: Endpoint do servidor o2b2-auth-server
        set $o2b2_auth_server_host "http://localhost:3000";
        
        #EDITAR: hostname/domínio público pelo qual o servidor será acesso nos endpoints com mTLS
        server_name mtls-as.localhost;

        #EDITAR: caminho dos certiicados (chaves pública e privada) do hostname declarado acima
        ssl_certificate /etc/nginx/certs/mtls-as.localhost.crt;
        ssl_certificate_key /etc/nginx/certs/mtls-as.localhost.key;

        ssl_ciphers DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers on;

        ssl_protocols TLSv1.2 TLSv1.3;

        proxy_set_header ssl-client-cert $ssl_client_escaped_cert;
        proxy_set_header Referer $http_referer;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Host $http_host;

		ssl_client_certificate "/etc/nginx/certs/sandbox_issuers.pem";
        ssl_verify_client "on";
        ssl_verify_depth 1;
        #Uncomment the property below for production
        #ssl_ocsp on;

        #Endpoints do o2b2-auth-server que precisam de mTLS
        location /token {
            proxy_pass $o2b2_auth_server_host;
        }

        location /token/introspection {
            proxy_pass $o2b2_auth_server_host;
        }

        location /request {
            proxy_pass $o2b2_auth_server_host;
        }

        location /me {
            proxy_pass $o2b2_auth_server_host;
        }

        location /reg {
            proxy_pass $o2b2_auth_server_host;
        }

        location /revoke {
            proxy_pass $o2b2_auth_server_host;
        }

        #Endpoints das API's de negócio que precisam de mTLS
    }
}
